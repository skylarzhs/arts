<?xml version="1.0"?>
<phpunit xmlns="https://schema.phpunit.de/coverage/1.0">
  <file name="SingleLinkedList.php" path="\">
    <totals>
      <lines total="201" comments="40" code="161" executable="79" executed="79" percent="100.00"/>
      <methods count="11" tested="11" percent="100.00"/>
      <functions count="0" tested="0" percent="0"/>
      <classes count="1" tested="1" percent="100.00"/>
      <traits count="0" tested="0" percent="0"/>
    </totals>
    <class name="DataStructure\LinkedList\SingleLinkedList" start="12" executable="79" executed="79" crap="36">
      <package full="" name="" sub="" category=""/>
      <namespace name="DataStructure\LinkedList"/>
      <method name="__construct" signature="__construct()" start="20" end="23" crap="1" executable="2" executed="2" coverage="100"/>
      <method name="setHead" signature="setHead(SingleNode $val)" start="28" end="31" crap="1" executable="2" executed="2" coverage="100"/>
      <method name="getHead" signature="getHead()" start="36" end="39" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="getLen" signature="getLen()" start="41" end="44" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="init" signature="init()" start="46" end="50" crap="1" executable="3" executed="3" coverage="100"/>
      <method name="set" signature="set(int $index, $val)" start="58" end="76" crap="5" executable="11" executed="11" coverage="100"/>
      <method name="get" signature="get(int $index)" start="83" end="99" crap="5" executable="10" executed="10" coverage="100"/>
      <method name="insert" signature="insert($val, int $index = 0)" start="107" end="131" crap="6" executable="15" executed="15" coverage="100"/>
      <method name="delete" signature="delete(int $index)" start="137" end="166" crap="7" executable="18" executed="18" coverage="100"/>
      <method name="getNode" signature="getNode(int $index = 0)" start="171" end="183" crap="5" executable="8" executed="8" coverage="100"/>
      <method name="reverse" signature="reverse()" start="188" end="200" crap="3" executable="8" executed="8" coverage="100"/>
    </class>
    <coverage>
      <line nr="22">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testEmpty"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testInsert"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testInsertException"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGetNode"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGetInvalidNode"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testReverse"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSetNagativeError"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSetExceedError"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGetNagativeError"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGetExceedError"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDelete"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteOneNode"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteFirst"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteLast"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteNagativeError"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteExceedError"/>
      </line>
      <line nr="23">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testEmpty"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testInsert"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testInsertException"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGetNode"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGetInvalidNode"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testReverse"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSetNagativeError"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSetExceedError"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGetNagativeError"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGetExceedError"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDelete"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteOneNode"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteFirst"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteLast"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteNagativeError"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteExceedError"/>
      </line>
      <line nr="30">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testInsert"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testReverse"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDelete"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteOneNode"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteFirst"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteLast"/>
      </line>
      <line nr="31">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testInsert"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testReverse"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDelete"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteOneNode"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteFirst"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteLast"/>
      </line>
      <line nr="38">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testInsert"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGetNode"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testReverse"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDelete"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteOneNode"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteFirst"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteLast"/>
      </line>
      <line nr="43">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testEmpty"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testInsert"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGetNode"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testReverse"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSetNagativeError"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSetExceedError"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGetExceedError"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDelete"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteOneNode"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteFirst"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteLast"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteExceedError"/>
      </line>
      <line nr="48">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testEmpty"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testInsert"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testInsertException"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGetNode"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGetInvalidNode"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testReverse"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSetNagativeError"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSetExceedError"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGetNagativeError"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGetExceedError"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDelete"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteOneNode"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteFirst"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteLast"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteNagativeError"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteExceedError"/>
      </line>
      <line nr="49">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testEmpty"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testInsert"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testInsertException"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGetNode"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGetInvalidNode"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testReverse"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSetNagativeError"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSetExceedError"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGetNagativeError"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGetExceedError"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDelete"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteOneNode"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteFirst"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteLast"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteNagativeError"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteExceedError"/>
      </line>
      <line nr="50">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testEmpty"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testInsert"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testInsertException"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGetNode"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGetInvalidNode"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testReverse"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSetNagativeError"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSetExceedError"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGetNagativeError"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGetExceedError"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDelete"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteOneNode"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteFirst"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteLast"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteNagativeError"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteExceedError"/>
      </line>
      <line nr="60">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSetNagativeError"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSetExceedError"/>
      </line>
      <line nr="61">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSetExceedError"/>
      </line>
      <line nr="64">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSetNagativeError"/>
      </line>
      <line nr="65">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSetNagativeError"/>
      </line>
      <line nr="68">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSet"/>
      </line>
      <line nr="69">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSet"/>
      </line>
      <line nr="70">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSet"/>
      </line>
      <line nr="71">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSet"/>
      </line>
      <line nr="72">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSet"/>
      </line>
      <line nr="74">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSet"/>
      </line>
      <line nr="75">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSet"/>
      </line>
      <line nr="85">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testInsert"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testReverse"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGetNagativeError"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGetExceedError"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDelete"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteFirst"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteLast"/>
      </line>
      <line nr="86">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGetNagativeError"/>
      </line>
      <line nr="89">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testInsert"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testReverse"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGetExceedError"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDelete"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteFirst"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteLast"/>
      </line>
      <line nr="90">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGetExceedError"/>
      </line>
      <line nr="92">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testInsert"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testReverse"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDelete"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteFirst"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteLast"/>
      </line>
      <line nr="93">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testInsert"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testReverse"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDelete"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteFirst"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteLast"/>
      </line>
      <line nr="94">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testInsert"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testReverse"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDelete"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteFirst"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteLast"/>
      </line>
      <line nr="95">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testInsert"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testReverse"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDelete"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteLast"/>
      </line>
      <line nr="96">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testInsert"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testReverse"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDelete"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteLast"/>
      </line>
      <line nr="98">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testInsert"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testReverse"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDelete"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteFirst"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteLast"/>
      </line>
      <line nr="109">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testInsert"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testInsertException"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testReverse"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDelete"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteOneNode"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteFirst"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteLast"/>
      </line>
      <line nr="110">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testInsertException"/>
      </line>
      <line nr="113">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testInsert"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testReverse"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDelete"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteOneNode"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteFirst"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteLast"/>
      </line>
      <line nr="114">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testInsert"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testReverse"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDelete"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteOneNode"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteFirst"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteLast"/>
      </line>
      <line nr="116">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testInsert"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testReverse"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDelete"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteOneNode"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteFirst"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteLast"/>
      </line>
      <line nr="117">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testInsert"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testReverse"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDelete"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteOneNode"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteFirst"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteLast"/>
      </line>
      <line nr="118">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testInsert"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testReverse"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDelete"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteOneNode"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteFirst"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteLast"/>
      </line>
      <line nr="119">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testInsert"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testReverse"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDelete"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteOneNode"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteFirst"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteLast"/>
      </line>
      <line nr="120">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testInsert"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testReverse"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testSet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGet"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDelete"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteOneNode"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteFirst"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteLast"/>
      </line>
      <line nr="123">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testInsert"/>
      </line>
      <line nr="124">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testInsert"/>
      </line>
      <line nr="125">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testInsert"/>
      </line>
      <line nr="128">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testInsert"/>
      </line>
      <line nr="129">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testInsert"/>
      </line>
      <line nr="130">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testInsert"/>
      </line>
      <line nr="139">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDelete"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteOneNode"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteFirst"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteLast"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteNagativeError"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteExceedError"/>
      </line>
      <line nr="140">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteNagativeError"/>
      </line>
      <line nr="143">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDelete"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteOneNode"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteFirst"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteLast"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteExceedError"/>
      </line>
      <line nr="144">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteExceedError"/>
      </line>
      <line nr="147">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDelete"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteOneNode"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteFirst"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteLast"/>
      </line>
      <line nr="148">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDelete"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteOneNode"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteFirst"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteLast"/>
      </line>
      <line nr="149">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteOneNode"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteFirst"/>
      </line>
      <line nr="150">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteOneNode"/>
      </line>
      <line nr="152">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteFirst"/>
      </line>
      <line nr="154">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteOneNode"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteFirst"/>
      </line>
      <line nr="155">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteOneNode"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteFirst"/>
      </line>
      <line nr="158">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDelete"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteLast"/>
      </line>
      <line nr="159">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDelete"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteLast"/>
      </line>
      <line nr="160">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDelete"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteLast"/>
      </line>
      <line nr="161">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDelete"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteLast"/>
      </line>
      <line nr="163">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDelete"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteLast"/>
      </line>
      <line nr="164">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDelete"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteLast"/>
      </line>
      <line nr="165">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDelete"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testDeleteLast"/>
      </line>
      <line nr="173">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGetNode"/>
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGetInvalidNode"/>
      </line>
      <line nr="174">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGetInvalidNode"/>
      </line>
      <line nr="176">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGetNode"/>
      </line>
      <line nr="177">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGetNode"/>
      </line>
      <line nr="178">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGetNode"/>
      </line>
      <line nr="179">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGetNode"/>
      </line>
      <line nr="180">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGetNode"/>
      </line>
      <line nr="182">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testGetNode"/>
      </line>
      <line nr="190">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testReverse"/>
      </line>
      <line nr="191">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testReverse"/>
      </line>
      <line nr="193">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testReverse"/>
      </line>
      <line nr="194">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testReverse"/>
      </line>
      <line nr="195">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testReverse"/>
      </line>
      <line nr="196">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testReverse"/>
      </line>
      <line nr="198">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testReverse"/>
      </line>
      <line nr="199">
        <covered by="Tests\DataStrcture\SingleLinkedListTest::testReverse"/>
      </line>
    </coverage>
    <source>
      <line no="1">
        <token name="T_OPEN_TAG">&lt;?php</token>
      </line>
      <line no="2"/>
      <line no="3">
        <token name="T_NAMESPACE">namespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">DataStructure</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">LinkedList</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="4"/>
      <line no="5">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Exception</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="6"/>
      <line no="7">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">DataStructure</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">LinkedList</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">SingleNode</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="8"/>
      <line no="9">
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="10">
        <token name="T_DOC_COMMENT"> * &#x5355;&#x5411;&#x94FE;&#x8868;</token>
      </line>
      <line no="11">
        <token name="T_DOC_COMMENT"> */</token>
      </line>
      <line no="12">
        <token name="T_CLASS">class</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">SingleLinkedList</token>
      </line>
      <line no="13">
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="14">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$head</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="15">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$len</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="16"/>
      <line no="17">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="18">
        <token name="T_DOC_COMMENT">     * &#x521D;&#x59CB;&#x5316;&#x5934;&#x7ED3;&#x70B9;</token>
      </line>
      <line no="19">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="20">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">__construct</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="21">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="22">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">init</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="23">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="24"/>
      <line no="25">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="26">
        <token name="T_DOC_COMMENT">     * &#x8BBE;&#x7F6E;&#x5934;&#x7ED3;&#x70B9;</token>
      </line>
      <line no="27">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="28">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">setHead</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">SingleNode</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$val</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="29">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="30">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">head</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$val</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="31">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="32"/>
      <line no="33">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="34">
        <token name="T_DOC_COMMENT">     * &#x83B7;&#x53D6;&#x5934;&#x7ED3;&#x70B9;</token>
      </line>
      <line no="35">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="36">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getHead</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="37">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="38">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">head</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="39">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="40"/>
      <line no="41">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getLen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="42">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="43">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">len</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="44">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="45"/>
      <line no="46">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">init</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="47">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="48">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">head</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="49">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">len</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="50">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="51"/>
      <line no="52">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="53">
        <token name="T_DOC_COMMENT">     * &#x8BBE;&#x7F6E;&#x67D0;&#x4F4D;&#x7F6E;&#x7684;&#x8282;&#x70B9;&#x6570;&#x636E;</token>
      </line>
      <line no="54">
        <token name="T_DOC_COMMENT">     * @param int index</token>
      </line>
      <line no="55">
        <token name="T_DOC_COMMENT">     * @param $data</token>
      </line>
      <line no="56">
        <token name="T_DOC_COMMENT">     * @return bool</token>
      </line>
      <line no="57">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="58">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">set</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$index</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$val</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="59">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="60">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$index</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_GREATER_OR_EQUAL">&gt;=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getLen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="61">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Exception</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Node does not exist.'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">2</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="62">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="63"/>
      <line no="64">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$index</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LT">&lt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="65">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Exception</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Invalid index value.'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_MINUS">-</token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="66">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="67"/>
      <line no="68">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$i</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="69">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$node</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getHead</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="70">
        <token name="T_WHITESPACE">        </token>
        <token name="T_WHILE">while</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$node</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">Next</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">NULL</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$i</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LT">&lt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$index</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="71">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$node</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$node</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">Next</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="72">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$i</token>
        <token name="T_INC">++</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="73">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="74">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$node</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">Data</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$val</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="75">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="76">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="77"/>
      <line no="78">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="79">
        <token name="T_DOC_COMMENT">     * &#x83B7;&#x53D6;&#x67D0;&#x8282;&#x70B9;&#x6570;&#x636E;</token>
      </line>
      <line no="80">
        <token name="T_DOC_COMMENT">     * @param int index</token>
      </line>
      <line no="81">
        <token name="T_DOC_COMMENT">     * @return mixed</token>
      </line>
      <line no="82">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="83">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">get</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$index</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="84">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="85">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$index</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LT">&lt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="86">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Exception</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Invalid index value.'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_MINUS">-</token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="87">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="88"/>
      <line no="89">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$index</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_GREATER_OR_EQUAL">&gt;=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getLen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="90">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Exception</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Node does not exist.'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">2</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="91">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="92">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$i</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="93">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$node</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getHead</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="94">
        <token name="T_WHITESPACE">        </token>
        <token name="T_WHILE">while</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$node</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">Next</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">NULL</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$i</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LT">&lt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$index</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="95">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$node</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$node</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">Next</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="96">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$i</token>
        <token name="T_INC">++</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="97">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="98">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$node</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">Data</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="99">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="100"/>
      <line no="101">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="102">
        <token name="T_DOC_COMMENT">     * &#x5728;&#x67D0;&#x4F4D;&#x7F6E;&#x63D2;&#x5165;&#x8282;&#x70B9;</token>
      </line>
      <line no="103">
        <token name="T_DOC_COMMENT">     * @param mixed $val</token>
      </line>
      <line no="104">
        <token name="T_DOC_COMMENT">     * @param int index</token>
      </line>
      <line no="105">
        <token name="T_DOC_COMMENT">     * @return bool</token>
      </line>
      <line no="106">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="107">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">insert</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$val</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$index</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="108">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="109">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$index</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LT">&lt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$index</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_GT">&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getLen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="110">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Exception</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Invalid index value.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="111">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="112"/>
      <line no="113">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$i</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="114">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$node</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getHead</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="115"/>
      <line no="116">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$index</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_EQUAL">==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="117">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$node</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">SingleNode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$val</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$node</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="118">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">setHead</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$node</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="119">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">len</token>
        <token name="T_INC">++</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="120">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="121">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="122"/>
      <line no="123">
        <token name="T_WHITESPACE">        </token>
        <token name="T_WHILE">while</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$node</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">Next</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">NULL</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$i</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LT">&lt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$index</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="124">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$node</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$node</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">Next</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="125">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$i</token>
        <token name="T_INC">++</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="126">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="127"/>
      <line no="128">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$node</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">Next</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">SingleNode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$val</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$node</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">Next</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="129">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">len</token>
        <token name="T_INC">++</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="130">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="131">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="132">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="133">
        <token name="T_DOC_COMMENT">     * &#x5220;&#x9664;&#x67D0;&#x4F4D;&#x7F6E;&#x7684;&#x8282;&#x70B9;</token>
      </line>
      <line no="134">
        <token name="T_DOC_COMMENT">     * @param int index</token>
      </line>
      <line no="135">
        <token name="T_DOC_COMMENT">     * @return bool</token>
      </line>
      <line no="136">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="137">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">delete</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$index</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="138">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="139">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$index</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LT">&lt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="140">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Exception</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Invalid index value.'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_MINUS">-</token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="141">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="142"/>
      <line no="143">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$index</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_GREATER_OR_EQUAL">&gt;=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getLen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="144">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Exception</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Node does not exist.'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">2</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="145">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="146"/>
      <line no="147">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$node</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getHead</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="148">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$index</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_EQUAL">==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="149">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getLen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_EQUAL">==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="150">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">head</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="151">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSE">else</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="152">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">setHead</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$node</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">Next</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="153">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="154">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">len</token>
        <token name="T_DEC">--</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="155">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="156">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="157"/>
      <line no="158">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$i</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="159">
        <token name="T_WHITESPACE">        </token>
        <token name="T_WHILE">while</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$node</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">Next</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">NULL</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$i</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LT">&lt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$index</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="160">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$node</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$node</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">Next</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="161">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$i</token>
        <token name="T_INC">++</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="162">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="163">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$node</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">Next</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$node</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">Next</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">Next</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="164">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">len</token>
        <token name="T_DEC">--</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="165">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="166">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="167"/>
      <line no="168">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="169">
        <token name="T_DOC_COMMENT">     * &#x83B7;&#x53D6;&#x6307;&#x5B9A;&#x8282;&#x70B9;</token>
      </line>
      <line no="170">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="171">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getNode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$index</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="172">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="173">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$index</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LT">&lt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$index</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_GT">&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getLen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="174">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Exception</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Invalid index value!'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="175">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="176">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$i</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="177">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$node</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getHead</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="178">
        <token name="T_WHITESPACE">        </token>
        <token name="T_WHILE">while</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$node</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">Next</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">NULL</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$i</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LT">&lt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$index</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="179">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$node</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$node</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">Next</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="180">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$i</token>
        <token name="T_INC">++</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="181">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="182">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$node</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="183">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="184"/>
      <line no="185">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="186">
        <token name="T_DOC_COMMENT">     * reverse single linked list</token>
      </line>
      <line no="187">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="188">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">reverse</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="189">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="190">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getLen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_SMALLER_OR_EQUAL">&lt;=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="191">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="192">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="193">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$node</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getHead</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="194">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$newNode</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">SingleNode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$node</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">Data</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="195">
        <token name="T_WHITESPACE">        </token>
        <token name="T_WHILE">while</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$node</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$node</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">Next</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="196">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$newNode</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">SingleNode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$node</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">Data</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$newNode</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="197">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="198">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$newNode</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">setHead</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$newNode</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="199">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="200">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="201">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="202"/>
    </source>
  </file>
</phpunit>
